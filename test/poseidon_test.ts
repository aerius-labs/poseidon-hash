import { compile, acir_from_bytes } from '@noir-lang/noir_wasm';
import { setup_generic_prover_and_verifier, create_proof, verify_proof, create_proof_with_witness } from '@noir-lang/barretenberg/dest/client_proofs';
import { packed_witness_to_witness, serialise_public_inputs, compute_witnesses } from '@noir-lang/aztec_backend';
import path from 'path';
import { readFileSync } from 'fs';
import { expect } from 'chai';
import { ethers } from "hardhat";
import { Contract, ContractFactory, utils } from 'ethers';

describe('Poseidon test using solidity verifier', function() {
    let Verifier: ContractFactory;
    let verifierContract: Contract;

    before(async () => {
        Verifier = await ethers.getContractFactory("TurboVerifier");
        verifierContract = await Verifier.deploy();
    });

    it("Should verify using proof generated by typescript wrapper", async () => {
        const compiled_program = compile(path.resolve(__dirname, '../circuits/src/main.nr')); 
        let acir = compiled_program.circuit;

        let abi = {
            inputs: [1],
            output: 0,
            return: 1,
        }

        let [prover, verifier] = await setup_generic_prover_and_verifier(acir);
 
        const proof = await create_proof(prover, acir, abi);

        const verified = await verify_proof(verifier, proof);
        expect(verified).eq(true)

        const sc_verified = await verifierContract.verify(proof);
        expect(sc_verified).eq(true)
    });

});

function path_to_uint8array(path: string) {
    let buffer = readFileSync(path);
    return new Uint8Array(buffer);
}